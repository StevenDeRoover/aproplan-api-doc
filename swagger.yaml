swagger: '2.0'
info:
  description: This is a sample of APROPLAN API.
  version: 1.7.0
  title: APROPLAN API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    name: APROPLAN support
    email: support@aproplan.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: api.aproplan.com
basePath: /rest
tags:
  - name: Login
    description: necessary method to identify a user
  - name: Form Template
    description: Everything about Form Templates
  - name: Forms
    description: Everything about Forms
schemes:
  - https
parameters:
  tokenParam:
    name: t
    in: query
    description: the token to call the api method
    required: true
    type: string
  dateFormatParam:
    name: dateformat
    in: query
    description: to specify how date must be formatted
    required: false
    type: string
    enum:
      - microsoft
      - iso
    default: microsoft
  requesterParam:
    name: requesterid
    in: query
    required: true
    type: string
    description: >-
      this is the token you received from aproplan to identify as a user of the
      APROPLAN API
  filterParam:
    in: query
    name: filter
    description: >-
      This is the filter to apply to retrieve the list of entities available for
      the current user
    type: string
  pathtoloadParam:
    in: query
    name: pathtoload
    description: >-
      This is the pathtoload to know which related entities we need to retrieve
      in the call
    type: string
  sortorderParam:
    in: query
    name: sortorder
    description: >-
      Specify the property on which the list of data can sorted. Each property
      must be separated by comma. Depending of the kind of entity to load, the
      properties used for sort are specific.
    type: string
  loadfkParam:
    in: query
    name: isloadfkidproperty
    description: >-
      "To specify if it is necessary to load Id of related object. Example: You
      want to load Country with to load the object Language but you want at
      least to have the Language object created with only the Id property
      (Country.Language.Id).  In that case, you need to specify this parameter
      to true "
    type: string
paths:
  /loginsecure:
    post:
      operationId: loginSecure
      tags:
        - Login
      summary: 'to identify a user and then, to be able to make other call in the api'
      parameters:
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: body
          name: body
          schema:
            $ref: '#/definitions/AliasPass'
      responses:
        '200':
          description: >-
            Successful operation returning a new TokenInfo object with the new
            valid token to use
          schema:
            $ref: '#/definitions/TokenInfo'
  /renewtoken:
    get:
      operationId: renewToken
      tags:
        - Login
      summary: >-
        Permit to request a new token to identify the user before the current
        one becomes invalidate.
      parameters:
        - in: query
          name: t
          description: >-
            the current valid token received at the login or a previous renew
            token
          type: string
      responses:
        '200':
          description: >-
            Successful operation returning a new TokenInfo object with the new
            valid token to use
          schema:
            $ref: '#/definitions/TokenInfo'
  /users:
    post:
      operationId: createUser
      tags:
        - Login
      summary: Create an account in APROPLAN
      description: >-
        To create an new user in aproplan, it is necessary to send the user
        object with at least the following properties of User object * Id *
        Alias * DisplayName * Person
          * Id
          * Code
          * Name
          * LanguageCode
          * Country
            * Id
        * LanguageCode
      parameters:
        - in: body
          name: body
          description: 'Need an object with 2 properties: User and Pass'
          schema:
            $ref: '#/definitions/UserPass'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/User'
  /forms:
    get:
      operationId: getForms
      tags:
        - Forms
      summary: Return the list of forms available to the current user
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - $ref: '#/parameters/filterParam'
        - $ref: '#/parameters/pathtoloadParam'
      description: ''
      responses:
        '200':
          description: >-
            Successful operation returning the array of form corresponding to
            the queryparameter
          schema:
            type: array
            items:
              $ref: '#/definitions/Form'
    post:
      operationId: postForms
      tags:
        - Forms
      summary: To create new form in the cloud APROPLAN
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: body
          name: body
          description: This is the array of forms to create through the cloud
          schema:
            type: array
            items:
              $ref: '#/definitions/Form'
      responses:
        '200':
          description: Successful operation to create new form array in the cloud
          schema:
            type: array
            items:
              $ref: '#/definitions/Form'
    put:
      operationId: putForms
      tags:
        - Forms
      summary: To update forms in the cloud APROPLAN
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: body
          name: body
          description: This is the array of forms to update in the cloud
          schema:
            type: array
            items:
              $ref: '#/definitions/Form'
      responses:
        '200':
          description: Successful operation to update array of forms in the cloud
          schema:
            type: array
            items:
              $ref: '#/definitions/Form'
    delete:
      operationId: deleteForms
      tags:
        - Forms
      summary: To delete forms and all items in the cloud APROPLAN
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: body
          name: body
          description: Array of FormSignature id to delete from the cloud
          required: true
          schema:
            type: array
            items:
              type: string
            example:
              - ea5d793f-c795-4311-8344-eb18e8efa065
              - afff9354-abb3-4a9c-aca5-9810490938ef
      responses:
        '200':
          description: >-
            Successful operation meaning all specified id of Form are deleted
            from the cloud
          schema:
            type: string
            example: success
  /formitems:
    get:
      operationId: getFormItems
      tags:
        - Forms
      summary: Retrieve items related to a specific form
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: query
          name: parentEntityId
          required: true
          description: This is the parent form for which the item are requested
          type: string
      description: ''
      responses:
        '200':
          description: >-
            Successful operation returning the array of form item corresponding
            to a specific form
          schema:
            type: array
            items:
              $ref: '#/definitions/FormItem'
    post:
      operationId: postFormItems
      tags:
        - Forms
      summary: Create new items related to a specific form
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: body
          name: body
          required: true
          description: This is the array of form's item to create
          schema:
            type: array
            items:
              $ref: '#/definitions/FormItem'
      description: ''
      responses:
        '200':
          description: Successful operation returning the array of form's items created
          schema:
            type: array
            items:
              $ref: '#/definitions/FormItem'
    put:
      operationId: putFormItems
      tags:
        - Forms
      summary: Update form's items
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: body
          name: body
          required: true
          description: This is the array of form's item to update
          schema:
            type: array
            items:
              $ref: '#/definitions/FormItem'
      description: ''
      responses:
        '200':
          description: Successful operation returning the array of form's items updated
          schema:
            type: array
            items:
              $ref: '#/definitions/FormItem'
  /formsignatures:
    get:
      operationId: getFormSignatures
      tags:
        - Forms
      summary: Retrieve the signatures of a specified form
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: query
          name: parentEntityId
          required: true
          description: This is the parent form for which the signature are requested
          type: string
      description: ''
      responses:
        '200':
          description: >-
            Successful operation returning the array of form signatures
            corresponding to a specific form
          schema:
            type: array
            items:
              $ref: '#/definitions/FormSignature'
    put:
      operationId: putFormSignatures
      tags:
        - Forms
      summary: To edit a new signature for the form
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: body
          name: body
          description: Array of formsignatures to edit
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/FormSignature'
      responses:
        '200':
          description: 'Successfull update of all signatures. '
          schema:
            type: array
            items:
              $ref: '#/definitions/FormSignature'
    post:
      operationId: postFormSignatures
      tags:
        - Forms
      summary: To create  new signatures for the form
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: body
          name: body
          description: Array of formsignatures to create
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/FormSignature'
      responses:
        '200':
          description: 'Successfull create of all signatures. '
          schema:
            type: array
            items:
              $ref: '#/definitions/FormSignature'
  /previewformreport:
    post:
      operationId: previewFormReport
      tags:
        - Forms
      summary: To preview the form report
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: body
          name: FormReportParams
          description: >-
            Basic definition of the report that will be generated after the
            finalization, if successful.
          schema:
            $ref: '#/definitions/FormReportParams'
      responses:
        '200':
          description: The report request is created with parameter
          schema:
            $ref: '#/definitions/ReportRestIdentification'
  /formfinalization:
    put:
      operationId: formFinalization
      tags:
        - Forms
      summary: Finalize a form
      parameters:
        - in: body
          name: FormReportParams
          description: >-
            Basic definition of the report that will be generated after the
            finalization, if successful.
          schema:
            $ref: '#/definitions/FormReportParams'
      responses:
        '200':
          description: >-
            Successful operation. Return the form finalized and the
            ReportRequest identification
          schema:
            $ref: '#/definitions/FormFinalizationResponse'
  /formtemplates:
    get:
      operationId: getFormTemplates
      tags:
        - Form Template
      summary: Return form template available to the current user
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - $ref: '#/parameters/filterParam'
        - $ref: '#/parameters/pathtoloadParam'
      description: ''
      responses:
        '200':
          description: >-
            Successful operation returning the array of formtemplate
            corresponding to the queryparameter
          schema:
            type: array
            items:
              $ref: '#/definitions/FormTemplate'
    post:
      operationId: postFormTemplates
      tags:
        - Form Template
      summary: >-
        To create new form templates for the company of the current user to
        APROPLAN
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: body
          name: body
          description: Form object that needs to be added
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/FormTemplate'
      responses:
        '200':
          description: Successful operation returning the array of formtemplate created
          schema:
            type: array
            items:
              $ref: '#/definitions/FormTemplate'
        '405':
          description: Invalid input
    put:
      tags:
        - Form Template
      summary: Update a form template available to the current user
      operationId: updateFormTemplate
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: body
          name: body
          description: Form object that needs to be added
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/FormTemplate'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/FormTemplate'
        '405':
          description: Invalid input
    delete:
      operationId: deleteFormTemplates
      tags:
        - Form Template
      summary: Delete a form template available to the current user
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: body
          name: body
          description: Array of formtemplate id to delete from the cloud
          required: true
          schema:
            type: array
            items:
              type: number
            example:
              - ea5d793f-c795-4311-8344-eb18e8efa065
              - afff9354-abb3-4a9c-aca5-9810490938ef
      responses:
        '200':
          description: >-
            Successful operation meaning all specified id of FormTemplate are
            deleted with all related questions from the cloud
          schema:
            type: string
            example: success
  /formquestions:
    get:
      operationId: getFormQuestions
      tags:
        - Form Template
      summary: Retrieve questions related to a specific form template
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: query
          name: parentEntityId
          required: true
          description: >-
            This is the parent form template for which the questions are
            requested
          type: string
      description: ''
      responses:
        '200':
          description: >-
            Successful operation returning the array of form question
            corresponding to a specific form
          schema:
            type: array
            items:
              $ref: '#/definitions/FormQuestion'
  /formsignaturerules:
    get:
      operationId: getFormSignatureRules
      tags:
        - Form Template
      summary: Retrieve the signature rules of a specified form template
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: query
          name: parentEntityId
          required: true
          description: >-
            This is the parent form template for which the signature rules are
            requested
          type: string
      description: ''
      responses:
        '200':
          description: >-
            Successful operation returning the array of form signature rule
            corresponding to a specific form template
          schema:
            type: array
            items:
              $ref: '#/definitions/FormSignatureRule'
    put:
      operationId: putFormSignatureRules
      tags:
        - Form Template
      summary: To edit a new signature rule for the template
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: body
          name: body
          description: Array of formsignaturerules to edit
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/FormSignatureRule'
      responses:
        '200':
          description: 'Successfull update of all signature rules. '
          schema:
            type: array
            items:
              $ref: '#/definitions/FormSignatureRule'
    post:
      operationId: postFormSignatureRules
      tags:
        - Form Template
      summary: To create  new signature rules for the template
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: body
          name: body
          description: Array of formsignaturerules to create
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/FormSignatureRule'
      responses:
        '200':
          description: 'Successfull create of all signature rules. '
          schema:
            type: array
            items:
              $ref: '#/definitions/FormSignatureRule'
    delete:
      tags:
        - Form Template
      summary: Delete form signature rules available to the current user
      operationId: deleteFormSignatureRule
      parameters:
        - $ref: '#/parameters/tokenParam'
        - $ref: '#/parameters/requesterParam'
        - $ref: '#/parameters/dateFormatParam'
        - in: body
          name: body
          description: Array of formsignaturerule id to delete from the cloud
          required: true
          schema:
            type: array
            items:
              type: number
            example:
              - ea5d793f-c795-4311-8344-eb18e8efa065
              - afff9354-abb3-4a9c-aca5-9810490938ef
      responses:
        '200':
          description: >-
            Successful operation meaning all specified id of FormSignatureRule
            are deleted
          schema:
            type: string
            example: success
  /formsync:
    get:
      tags:
        - Form Synchronization
      summary: Retrieve form of a user from a specific last datetime synchronization
      description: ''
      responses:
        '200':
          description: >-
            Successful operation returning the array of forms updated/deleted
            from a specific date
          schema:
            type: array
            items:
              $ref: '#/definitions/Form'
  /formtemplatesync:
    get:
      tags:
        - Form Synchronization
      summary: >-
        Retrieve form template available to a user from a specific last datetime
        synchronization
      description: ''
      responses:
        '200':
          description: >-
            Successful operation returning the array of forms updated/deleted
            from a specific date
          schema:
            type: array
            items:
              $ref: '#/definitions/Form'
definitions:
  AliasPass:
    title: AliasPass
    type: object
    properties:
      Alias:
        type: string
        description: This is the alias used by the user to identify himself into APROPLAN
        example: john.smith@aproplan.com
      Pass:
        type: string
        description: This is the password of the user to log in to APROPLAN
        example: aproplan
  UserPass:
    title: UserPass
    type: object
    properties:
      User:
        $ref: '#/definitions/User'
      Pass:
        type: string
        description: this is the password to apply to the new user
        example: aproplan
  TokenInfo:
    title: TokenInfo
    type: object
    properties:
      Token:
        type: string
        description: Guid to identify the user. Received at the login
        pattern: '^{[A-Z0-9]{8}-([A-Z0-9]{4}-){3}[A-Z0-9]{12}}$'
        example: a75678b7-5042-484e-99aa-a029aebc98b4
      ValidityLimit:
        type: string
        format: date-time
        description: The end date-time when the token will be invalidate
        example: '2018-01-10T16:07:56.7509736Z'
      ValidityStart:
        type: string
        format: date-time
        description: The start date-time of the token validity
        example: '2018-01-10T15:57:56.7509736Z'
  RestEntity:
    title: RestEntity
    type: object
    required:
      - Id
      - EntityVersion
    properties:
      Id:
        type: string
        description: Guid identifier
        pattern: '^{[A-Z0-9]{8}-([A-Z0-9]{4}-){3}[A-Z0-9]{12}}$'
        example: f230aeb4-7d72-435b-8e12-b9240156e098
      EntityVersion:
        type: integer
        format: int64
      EntityCreationUser:
        type: string
        description: Guid identifier
        pattern: '^{[A-Z0-9]{8}-([A-Z0-9]{4}-){3}[A-Z0-9]{12}}$'
  Language:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: Language
      - properties:
          Code:
            type: string
            description: This is the code of the language ISO2
            example: fr
          Name:
            type: string
            description: This is the name of the language in English
            example: French
          TranslationCode:
            type: string
            description: This is the localization of the language
            example: FR
          TranslatedName:
            type: string
            description: This is the name of the language in translated in this language
            example: Français
  Country:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: Country
      - properties:
          Name:
            type: string
            description: this is the name of the country
            example: Belgium
          Iso:
            type: string
            description: this is the iso of the country in 3 characters
            example: BEL
          Iso2:
            type: string
            description: this is the iso of the country in 2 characters
            example: BE
  Profession:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: Profession
      - properties:
          Code:
            type: string
          Name:
            type: string
  Phone:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: Phone
      - properties:
          Number:
            type: string
          Order:
            type: string
          InfoType:
            type: string
            enum:
              - Home
              - Home2
              - Business
              - Business2
              - Mobile
              - Other
  Email:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: Email
      - properties:
          Email:
            type: string
          Order:
            type: string
          InfoType:
            type: string
            enum:
              - Home
              - Home2
              - Business
              - Business2
              - Mobile
              - Other
  AccessRightBase:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: AccessRightBase
      - properties:
          CanEdit:
            type: boolean
            description: To know if the user can edit the object
          Level:
            type: string
            enum:
              - Admin
              - Manager
              - Contributor
              - Guest
              - Subcontractor
            description: This is the level of the access right of the user
            example: Admin
          Iso2:
            type: string
            description: this is the iso of the country in 2 characters
            example: BE
  Party:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: Party
      - properties:
          Code:
            type: string
          Name:
            type: string
          Language:
            $ref: '#/definitions/Language'
          LanguageCode:
            type: string
          Country:
            $ref: '#/definitions/Country'
          Email:
            type: string
          Phones:
            type: array
            items:
              $ref: '#/definitions/Phone'
          Emails:
            type: array
            items:
              $ref: '#/definitions/Email'
  Person:
    type: object
    allOf:
      - $ref: '#/definitions/Party'
      - type: object
      - title: Person
      - properties:
          SpellCheckLanguage:
            $ref: '#/definitions/Language'
  CompanyUserInvitationRequest:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - title: CompanyUserInvitationRequest
      - type: object
      - properties:
          Status:
            type: string
            enum:
              - Sent
              - Accepted
              - Refused
              - Cancelled
          Company:
            $ref: '#/definitions/ManagedCompany'
          InvitedUser:
            $ref: '#/definitions/User'
          Inviter:
            $ref: '#/definitions/User'
          StatusChangedDate:
            type: string
            format: date-time
  CompanyUser:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: CompanyUser
      - properties:
          IsOwner:
            type: boolean
          IsManager:
            type: boolean
          Company:
            $ref: '#/definitions/ManagedCompany'
          CompanyUserInvitationRequests:
            type: array
            items:
              - $ref: '#/definitions/CompanyUserInvitationRequest'
  ManagedCompany:
    type: object
    allOf:
      - $ref: '#/definitions/Party'
      - type: object
      - title: ManagedCompany
      - properties:
          CompanyOwner:
            $ref: '#/definitions/User'
          CompanyUsers:
            type: array
            items:
              $ref: '#/definitions/CompanyUser'
  User:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: User
      - properties:
          Alias:
            type: string
            description: >-
              This is the alias to use by the user to log in to the APROPLAN
              application
            example: john.smith@aproplan.com
          DisplayName:
            type: string
            example: John Smith
          TimeZoneName:
            type: string
            example: Jordan Standard Time
          DefaultEmail:
            type: string
            example: john.smith@aproplan.com
          LanguageCode:
            type: string
            example: en
          Person:
            $ref: '#/definitions/Person'
          Company:
            $ref: '#/definitions/ManagedCompany'
          LogoUrl:
            type: string
          Profession:
            $ref: '#/definitions/Profession'
          IsDailyMailReceiver:
            type: boolean
          LocalTimeToSendDailyMail:
            type: string
            format: date-time
          CompanyName:
            type: string
          Role:
            type: string
          Street:
            type: string
          Zip:
            type: string
          City:
            type: string
          IsDailyMyTasksReceiver:
            type: boolean
          LocalTimeToSendDailyMyTasks:
            type: string
            format: date-time
          AllowSync:
            type: boolean
          ActivationDate:
            type: string
            format: date-time
          MustChangePassword:
            type: boolean
          AvatarFileName:
            type: string
  Project:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: Project
      - properties:
          Code:
            type: string
            description: This is the code of the project
            example: MyP
          Name:
            type: string
            description: This is the name of the project
            example: My Project
          Address:
            type: string
          City:
            type: string
          ZipCode:
            type: string
          Country:
            $ref: '#/definitions/Country'
          IsActive:
            type: boolean
            description: >-
              To know if the project is active or not. Nothing can be done on
              project inactive
          LogoUrl:
            type: string
            description: This the url to display the logo of the project
          Creator:
            $ref: '#/definitions/User'
          StartDate:
            type: string
            format: date-time
          EndDate:
            type: string
            format: date-time
          UserAccessRight:
            $ref: '#/definitions/ProjectAccessRight'
          Folders:
            type: array
            items:
              $ref: '#/definitions/Folder'
          Contacts:
            type: array
            items:
              $ref: '#/definitions/ContactDetails'
          Cells:
            type: array
            items:
              $ref: '#/definitions/ParentCell'
          Chapters:
            type: array
            items:
              $ref: '#/definitions/Chapter'
          NoteStatus:
            type: array
            items:
              $ref: '#/definitions/NoteProjectStatus'
          Visibilities:
            type: array
            items:
              $ref: '#/definitions/ProjectVisibility'
          NotesNumber:
            type: number
            description: >-
              this is a calculated property then, it is necessary to specify it
              in the pathtoload to have a good value on it
          DocumentsNumber:
            type: number
            description: >-
              this is a calculated property then, it is necessary to specify it
              in the pathtoload to have a good value on it
          ParticipantsNumber:
            type: number
            description: >-
              this is a calculated property then, it is necessary to specify it
              in the pathtoload to have a good value on it
          NewFormatPictureName:
            type: boolean
            description: >-
              this is to specify if the project need to make the new
              numerotation for document and photo uploaded on it.
  ProjectVisibility:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: ProjectVisibility
      - properties:
          InvitedUserId:
            type: string
            description: this is the id of the user having the visibility on a folder
          InviterUserId:
            type: string
            description: this is the id of the user who grant the visibility to another
          IsCreator:
            type: boolean
            description: >-
              this flag is set to true when the visibility has been granted to a
              user because he created the folder
          ProjectId:
            type: string
  ProjectAccessRight:
    type: object
    allOf:
      - $ref: '#/definitions/AccessRightBase'
      - type: object
      - title: ProjectAccessRight
      - properties:
          CanConfig:
            type: boolean
            description: To know if the user can configure the project
          CanAddFolder:
            type: boolean
            description: To know if the user can add folder in the project
          CanUploadDoc:
            type: boolean
            description: To know if the user can upload document in the project
          CanDownloadDoc:
            type: boolean
            description: To know if the user can download doc from the project
          CanArchiveDoc:
            type: boolean
            description: To know if the user can archive doc of the project
          CanDeleteFolder:
            type: boolean
            description: >-
              To know if the user can delete folder of the project created by
              himself
          CanEditFolder:
            type: boolean
            description: >-
              To know if the user can edit a folder in the project created by
              himself
          CanEditAllFolder:
            type: boolean
            description: >-
              To know if the user can edit a folder even if he does not create
              the folder himself
          CanEditDoc:
            type: boolean
            description: To know if the user can edit a document uploaded by himself
          CanDeleteDoc:
            type: boolean
            description: To know if the user can delete a document uploaded by himself
          CanEditAllDoc:
            type: boolean
            description: >-
              To know if the user can edit a document even if he does not
              uploaded the document himself
          CanAddMeeting:
            type: boolean
            description: To know if the user can create a list in the project
          CanEditAllList:
            type: boolean
            description: >-
              To know if the user can edit a list even if he does not create the
              list himself
          CanAddVersion:
            type: boolean
            description: >-
              To know if the user can upload a new version on a document he
              uploaded
          CanDeleteVersion:
            type: boolean
            description: >-
              To know if the user can delete a version of a document he uploaded
              himself
          CanMoveDoc:
            type: boolean
            description: >-
              To know if the user can move a document to another folder of the
              project
          CanEditContact:
            type: boolean
            description: To know if the user can edit a participant of the project
          CanRemoveContact:
            type: boolean
            description: >-
              To know if the user can remove a participant he created himself of
              the project
          CanEditAllContact:
            type: boolean
            description: >-
              To know if the user can edit a participant even he does added this
              participant himself
  Folder:
    type: object
    allOf:
      - $ref: '#/definitions/Folder'
      - type: object
      - title: Folder
      - properties:
          Project:
            $ref: '#/definitions/Project'
          FolderType:
            type: string
            description: >-
              to specify the kind of the folder. To differentiate the one create
              by the user than the one creatd by the system.
            enum:
              - Custom
              - Photo
              - Report
          DisplayOrder:
            type: number
            description: to know in which order the folder must be displayed
          IsPublic:
            type: boolean
            description: >-
              to know if the folder is public to all participants of the project
              or not
          PlanNumber:
            type: number
            description: >-
              this is a calculated property then, it is necessary to specify it
              in the pathtoload to have a good value on it
          Children:
            type: array
            items:
              $ref: '#/definitions/Folder'
  FolderVisibility:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: FolderVisibility
      - properties:
          InvitedUserId:
            type: string
            description: this is the id of the user having the visibility on a folder
          InviterUserId:
            type: string
            description: this is the id of the user who grant the visibility to another
          IsCreator:
            type: boolean
            description: >-
              this flag is set to true when the visibility has been granted to a
              user because he created the folder
          FolderId:
            type: string
  ChapterBase:
    description: this is the base class to define category structure
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: ChapterBase
      - properties:
          Code:
            type: string
          Description:
            type: string
  Chapter:
    description: To represent category level 1
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: Chapter
      - properties:
          DisplayOrder:
            type: number
          IsDisabled:
            type: boolean
          ProjectId:
            type: string
          IssueTypes:
            type: array
            items:
              $ref: '#/definitions/IssueType'
  IssueTypeBase:
    description: this is the base class to define subcategory
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: IssueTypeBase
      - properties:
          Code:
            type: string
          Description:
            type: string
  IssueType:
    description: to represent subcategory (category level 2)
    type: object
    allOf:
      - $ref: '#/definitions/IssueTypeBase'
      - type: object
      - title: IssueType
      - properties:
          DisplayOrder:
            type: number
          ParentChapter:
            $ref: '#/definitions/Chapter'
          NoteSubjects:
            type: array
            items:
              $ref: '#/definitions/IssueTypeNoteSubject'
          HasDefaultNoteSubjects:
            type: boolean
            description: to know if the subcategory contains some default subjectsnumber
          IsDisabled:
            type: boolean
            description: to know if the subcategory can be used or not
          ContactIssueTypeLinks:
            type: array
            items:
              $ref: '#/definitions/ContactIssueType'
  IssueTypeNoteSubjectBase:
    description: this is the base class to define default subject of a subcategory
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: IssueTypeNoteSubjectBase
      - properties:
          Subject:
            type: string
          DefaultDescription:
            type: string
          DisplayOrder:
            type: number
  IssueTypeNoteSubject:
    description: this is the base class to define default subject of a subcategory
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: IssueTypeNoteSubjectBase
      - properties:
          IssueType:
            $ref: '#/definitions/IssueType'
            description: >-
              the parent subcategory for which a default subject/description is
              defined
  CellBase:
    description: this is the base class to define rooms
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: CellBase
      - properties:
          Code:
            type: string
          Description:
            type: string
          DisplayOrder:
            type: number
          IsDisabled:
            type: boolean
  ParentCell:
    description: to represent the first level of room
    type: object
    allOf:
      - $ref: '#/definitions/CellBase'
      - type: object
      - title: ParentCell
      - properties:
          ProjectId:
            type: string
          SubCells:
            type: array
            items:
              $ref: '#/definitions/SubCell'
  SubCell:
    description: to represent the first level of room
    type: object
    allOf:
      - $ref: '#/definitions/CellBase'
      - type: object
      - title: ParentCell
      - properties:
          ParentCell:
            $ref: '#/definitions/ParentCell'
  NoteProjectStatusBase:
    type: object
    description: ''
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: NoteProjectStatusBase
      - properties:
          Code:
            type: string
          Name:
            type: string
          DisplayOrder:
            type: integer
          IsOnlyUsedByMeetingManager:
            type: boolean
          Color:
            type: string
          IsTodo:
            type: boolean
          IsDone:
            type: boolean
          DoneAction:
            type: boolean
          IsBlocked:
            type: boolean
          IsBlockedAction:
            type: boolean
  NoteProjectStatus:
    type: object
    description: ''
    allOf:
      - $ref: '#/definitions/NoteProjectStatusBase'
      - type: object
      - title: NoteProjectStatus
      - properties:
          Project:
            $ref: '#/definitions/Project'
          IsDisabled:
            type: boolean
  ContactDetails:
    description: to represent participant of a project
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: ContactDetails
      - properties:
          User:
            $ref: '#/definitions/User'
            description: this is the user defined as participant of the project
          ProjectId:
            type: string
            description: This is the id of the project for which the user is participants
          Project:
            $ref: '#/definitions/Project'
          DisplayName:
            type: string
            description: >-
              This is the name we want to see when we use this participant
              through the project
            example: AP - John Smith
          City:
            type: string
          Phone:
            type: string
          Street:
            type: string
          Zip:
            type: string
          Vat:
            type: string
          Company:
            type: string
            example: APROPLAN
            description: >-
              A freetext to assign a company name to a participant then, when we
              assign an annotation to somebody, we can also specify a company
              name.  In that case, all participants with the same role will see
              the annotation as assign to him
          Role:
            type: string
            example: Architect
            description: >-
              A freetext to specify a role to a participant then, when we assign
              an annotation to somebody, we can also specify a role.  In that
              case, all participants with the same role will see the annotation
              as assign to him
          LinkedIssueTypes:
            type: array
            description: >-
              This is the list of subcategories linked to the participants of
              the project.
            items:
              $ref: '#/definitions/ContactIssueType'
          AccessRightLevel:
            type: string
            enum:
              - Admin
              - Manager
              - Contributor
              - Guest
            description: >-
              this is the level of access right of the participant in the
              project
          IsInvited:
            type: boolean
            example: Specify if the user can see or not the project through APROPLAN
  ContactIssueType:
    description: >-
      To represent the relation between a subcategory and a participant of a
      project
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: ContactIssueType
      - properties:
          ContactId:
            type: string
            description: >-
              the id of the contact on which the subcategory is linked
              (ContactDetails)
          IssueTypeId:
            type: string
            description: >-
              the id of the subcategory on which the contact is linked
              (IssueType)
          IssueType:
            $ref: '#/definitions/IssueType'
  SheetBase:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: SheetBase
      - properties:
          Width:
            type: integer
            description: This is the width of the sheet
            example: 800
          Height:
            type: integer
            description: This is the height of the sheet
            example: 600
          ZoomLevelNumber:
            type: integer
          TileSize:
            type: integer
          BigThumbWidth:
            type: integer
          BigThumbHeight:
            type: integer
          SmallThumbWidth:
            type: integer
          SmallThumbHeight:
            type: integer
  DocumentBase:
    type: object
    allOf:
      - $ref: '#/definitions/SheetBase'
      - type: object
      - title: DocumentBase
      - properties:
          ImageUrl:
            type: string
          SourceUrl:
            type: string
          Date:
            type: string
            format: date-time
          UploadedBy:
            $ref: '#/definitions/User'
          UploadedDate:
            type: string
            format: date-time
          Subject:
            type: string
          RotateAngle:
            type: integer
  Document:
    type: object
    allOf:
      - $ref: '#/definitions/DocumentBase'
      - type: object
      - title: Document
      - properties:
          FolderId:
            type: string
          Name:
            type: string
          PageCount:
            type: integer
          HasDifference:
            type: boolean
          IsArchived:
            type: boolean
  Meeting:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: Meeting
      - properties:
          Title:
            type: string
            description: ''
            example: My list
          Code:
            type: string
            description: ''
            example: MyL
          Comment:
            type: string
          Building:
            type: string
          Floor:
            type: string
          Date:
            type: string
            format: date-time
          Project:
            $ref: '#/definitions/Project'
          Occurrence:
            type: number
          IsArchived:
            type: boolean
          Type:
            type: string
            enum:
              - Meeting
              - Handover
              - Security
          NumberingType:
            type: string
            enum:
              - Sequential
              - OccSequential
              - CodeSequential
              - CodeOccSequential
          Header:
            type: string
          Footer:
            type: string
          Remarks:
            type: string
          IsPublic:
            type: boolean
          IsSystem:
            type: boolean
            description: >-
              to know if the list is one created by the system (private or
              public list)
          UserAccessRight:
            $ref: '#/definitions/MeetingAccessRight'
          MeetingAuthor:
            $ref: '#/definitions/User'
          LinkedNotes:
            type: array
            items:
              $ref: '#/definitions/Note'
          MeetingConcerns:
            type: array
            items:
              $ref: '#/definitions/MeetingConcern'
          MeetingDocuments:
            type: array
            items:
              $ref: '#/definitions/MeetingDocument'
          TransferredDocuments:
            type: array
            items:
              $ref: '#/definitions/MeetingTransferredDocs'
          MeetingReport:
            type: array
            items:
              $ref: '#/definitions/MeetingReport'
  MeetingAccessRight:
    type: object
    allOf:
      - $ref: '#/definitions/AccessRightBase'
      - type: object
      - title: MeetingAccessRight
      - properties:
          CanAddPoint:
            type: boolean
            description: Specify if the participant of the list can add point in the list
          CanEditPoint:
            type: boolean
            description: >-
              Specify if the participant of the list can edit a point he created
              himself
          CanDeletePoint:
            type: boolean
            description: >-
              Specify if the participant of the list can delete a point he
              created himself
          CanEditPointStatus:
            type: boolean
            description: >-
              Specify if the participant of the list can edit the status of a
              point even he cannot edit it
          CanEditPointIssueType:
            type: boolean
            description: >-
              Specify if the participant of the list can edit the subcategory of
              a point even he cannot edit it
          CanEditPointInCharge:
            type: boolean
            description: >-
              Specify if the participant of the list can edit user in charge
              list of a point even he cannot edit it
          CanAddComment:
            type: boolean
            description: >-
              Specify if the participant of the list can add a comment on a
              point
          CanDeleteComment:
            type: boolean
            description: >-
              Specify if the participant of the list can delete a comment of a
              point
          CanArchiveComment:
            type: boolean
            description: >-
              Specify if the participant of the list can archive a comment of a
              point
          CanAddDoc:
            type: boolean
            description: >-
              Specify if the participant of the list can attach document to the
              list
          CanGenerateReport:
            type: boolean
            description: >-
              Specify if the participant of the list can generate the report of
              the list
          CanCreateNextMeeting:
            type: boolean
            description: >-
              Specify if the participant of the list can create a new occurrence
              of the list
          CanEditAllPoint:
            type: boolean
            description: >-
              Specify if the participant of the list can edit a point of the
              list even he did not create himself
          CanViewOnlyPointInCharge:
            type: boolean
            description: >-
              Specify if the participant of the list can only see the point of
              the list where he specified as user in charge
          CanAddPointDocument:
            type: boolean
            description: >-
              Specify if the participant of the list can add attchment to a
              point of the list
          CanDeletePointDocument:
            type: boolean
            description: >-
              Specify if the participant of the list can detach a document of a
              list' s point
          CanViewDashboard:
            type: boolean
            description: >-
              Specify if the participant of the list can see a dashboard at list
              level
          CanViewParticipant:
            type: boolean
            description: >-
              Specify if the participant of the list can see the list of
              participants of the list
  MeetingConcern:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: MeetingConcern
      - properties:
          User:
            $ref: '#/definitions/User'
            description: This is the user specified as participants of the list
          PresenceStatus:
            type: string
            description: To specify a status of the presence of the participants
            enum:
              - Present
              - Absent
              - Excused
          Meeting:
            $ref: '#/definitions/Meeting'
          IsReport:
            type: boolean
          IsOwner:
            type: boolean
            description: To know if the participant is the one who created the list
          IsInvited:
            type: boolean
          Signature:
            type: string
          SignatureDate:
            type: string
            format: date-time
          DisplayOrder:
            type: number
          Miscellaneous:
            type: string
          IsDisabled:
            type: boolean
            description: To know if the participant is still active or not in the list
          ContactDetails:
            $ref: '#/definitions/ContactDetails'
            description: >-
              This is the link to the same user as the participant at project
              level
          IsInvitedOnProject:
            type: boolean
            description: >-
              To know if the participant has been really invited at project
              level
          AccessRightLevel:
            description: To specify the access right level of the participant in the list
            type: string
            enum:
              - Admin
              - Manager
              - Contributor
              - Guest
              - Subcontractor
  MeetingDocument:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: MeetingDocument
      - properties:
          Meeting:
            $ref: '#/definitions/Meeting'
          Document:
            $ref: '#/definitions/Document'
          Project:
            $ref: '#/definitions/Project'
          DisplayOrder:
            type: number
  MeetingTransferredDocs:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: MeetingTransferredDocs
      - properties:
          Meeting:
            $ref: '#/definitions/Meeting'
          UsersTo:
            type: array
            items:
              $ref: '#/definitions/MeetingTransferredDocsTo'
          Name:
            type: string
          Approved:
            type: string
          From:
            $ref: '#/definitions/User'
          FromTag:
            type: string
  MeetingTransferredDocsTo:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: MeetingTransferredDocsTo
      - properties:
          MeetingTransferredDocs:
            $ref: '#/definitions/MeetingTransferredDocs'
          UserId:
            $ref: '#/definitions/User'
          Tag:
            type: string
  MeetingReport:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: MeetingReport
      - properties:
          Meeting:
            $ref: '#/definitions/Meeting'
          Document:
            $ref: '#/definitions/Document'
            description: >-
              this is the document representing the report generated for the
              list
          VersionId:
            type: string
            description: this is the version id of the report generated
          Occurrence:
            type: number
            description: This is the occurrence number when the report has been requested
          SentDate:
            type: string
            format: date-time
  NoteComment:
    type: object
    description: To make comment on annotation
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: NoteComment
      - required:
          - NoteBaseId
      - properties:
          NoteBaseId:
            type: string
            description: This is the id of the Note on which the comment is linked
          From:
            description: >-
              This is the creator of the comment. This parameter is not used
              from the api
            $ref: '#/definitions/User'
          Date:
            type: string
            description: This is the creation date of the annotation
            format: date-time
          LastModificationDate:
            type: string
            description: This is the last modification date of the comment
            format: date-time
          IsRead:
            type: boolean
            example: true
          IsFirst:
            type: boolean
            example: false
          IsArchived:
            type: boolean
            example: false
          Code:
            type: string
          MeetingOccurrence:
            type: integer
          MeetingRevision:
            type: integer
          MeetingPointNumber:
            type: string
  NoteDocument:
    type: object
    description: To attach document on annotation
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: NoteDocument
      - required:
          - NoteBaseId
      - properties:
          NoteBaseId:
            type: string
            description: This is the id of the Note on which the document is linked
          DisplayOrder:
            type: integer
  NoteInCharge:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: NoteInCharge
      - required:
          - Tag
          - UserId
          - NoteBaseId
      - properties:
          NoteBaseId:
            type: string
            description: This is the id of the Note on which the document is linked
          UserId:
            type: string
          Tag:
            type: string
          IsContactInvitedOnProject:
            type: boolean
  NoteBase:
    type: object
    description: >-
      This is the base classes used for all kind of annotations available on
      APROPLAN
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: NoteBase
      - properties:
          Meeting:
            $ref: '#/definitions/Meeting'
            description: This is the meeting on which the annotation is linked
          Project:
            $ref: '#/definitions/Project'
            description: This is the project on which the annotation is linked
          ParentNote:
            description: >-
              An annotation can from/to be linked to another annotation. This is
              the parent annotation
            $ref: '#/definitions/NoteBase'
          ChildrenNotes:
            type: array
            items:
              $ref: '#/definitions/NoteBase'
          IsUrgent:
            type: boolean
            example: true
          CodeNum:
            type: string
            example: '1.05'
          Date:
            type: string
            description: This is the creation date of the annotation
            format: date-time
          ModificationDate:
            type: string
            format: date-time
          From:
            description: >-
              This is the creator of the annotation. This parameter is not used
              from the api
            $ref: '#/definitions/User'
          Subject:
            type: string
            description: This is the summary of the annotation
            example: My first annotation
          IsArchived:
            type: boolean
            description: 'To know if the annotation is archived or not '
            example: false
          ArchivedDate:
            type: string
            format: date-time
            description: To know when the annotation was archived the last time
          DueDate:
            type: string
            format: date-time
            description: >-
              This is the due date for which an action is expected for the
              annotation
          HasAttachment:
            type: boolean
            description: To know if there are some attachment linked to the annotation
          Comments:
            type: array
            items:
              $ref: '#/definitions/NoteComment'
          NoteDocuments:
            type: array
            items:
              $ref: '#/definitions/NoteDocument'
          NoteInCharge:
            type: array
            items:
              $ref: '#/definitions/NoteInCharge'
  Note:
    type: object
    description: This is the definition of an annotation
    allOf:
      - $ref: '#/definitions/NoteBase'
      - type: object
      - title: Note
      - properties:
          FormItemId:
            type: string
            format: guid
            description: >-
              If the note was created for form, we can specify for which item
              the note was created
          Status:
            $ref: '#/definitions/NoteProjectStatus'
  FormItemBase:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: FormItemBase
      - properties:
          DisplayOrder:
            type: integer
            format: int32
            description: This is the order of the item in the Form or Form template
            example: '0'
          Title:
            type: string
          Description:
            type: string
          ItemType:
            type: string
            enum:
              - string
              - number
              - array
          Template:
            type: string
          ConformityRules:
            type: string
  Form:
    type: object
    description: This is a Form created from a FormTemplate
    allOf:
      - $ref: '#/definitions/NoteBase'
      - type: object
      - title: Form
      - properties:
          Type:
            type: string
            enum:
              - Quality
              - Security
              - Environment
          Language:
            $ref: '#/definitions/Language'
          Status:
            type: string
            enum:
              - Todo
              - InProgress
              - Done
          DoneDate:
            type: string
            format: date-time
            description: This is the date when the form has been finalized
          TemplateId:
            type: string
            description: >-
              This is the id of the template from where the form has been
              created
          Signatures:
            type: array
            items:
              - $ref: '#/definitions/FormSignature'
          Items:
            type: array
            items:
              - $ref: '#/definitions/FormItem'
          IsConform:
            type: boolean
          Report:
            $ref: '#/definitions/Document'
  FormSignature:
    type: object
    description: This is the signature wanted for the Form
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: FormSignature
      - properties:
          FormId:
            type: number
            description: This is the id of the parent form
          SignatureRuleId:
            type: string
            description: >-
              This is the id of the signature rule from where the signature has
              been created
          Title:
            type: string
            description: This is the title to display for the signature
            example: User who fill the form
          Signature:
            type: string
            description: This is the list of point (coordinate) necessary to draw signature
            example: '62,75,54,71,52,71,51,71,50,71,50,70,52,62,62,48'
          Date:
            type: string
            format: date-time
            description: >-
              If a signature was done, this is the date time when the signature
              was done
          SignatureUser:
            $ref: '#/definitions/User'
  FormFinalizationResponse:
    type: object
    description: >-
      When a form is finalized, it contains information about the report request
      + the form with new status and data
    properties:
      Form:
        $ref: '#/definitions/Form'
      FormReportParams:
        $ref: '#/definitions/ReportRestIdentification'
  FormItem:
    type: object
    description: >-
      It is an item of a form, it means question with potential value given by a
      user
    allOf:
      - $ref: '#/definitions/FormItemBase'
      - type: object
      - title: FormItem
      - properties:
          FormId:
            type: string
            description: This is the id of the form owner of the item
            example: f230aeb4-7d72-435b-8e12-b9240156e098
          QuestionId:
            type: string
            description: >-
              This is the id of the question from where the item has been
              created
          User:
            description: >-
              This is the user who answered to the question. This parameter is
              not used from the api
            $ref: '#/definitions/User'
          Value:
            description: This is the value answered by the user converted to string
            type: string
            example: Die hard 3
          NotApplicable:
            type: boolean
            example: true
            description: >-
              A question can be not applicable then, the user is able to answer
              by setting this value to true
          IsConform:
            type: boolean
            example: true
            description: >-
              When the answer is given and there are rule of conformity. This
              value is computed regarding the value and conformity rules
  FormTemplate:
    type: object
    description: This is a template of Form
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: FormTemplate
      - properties:
          Subject:
            type: string
            description: This is the subject of the form
          Type:
            type: string
            enum:
              - Quality
              - Security
              - Environment
          Language:
            $ref: '#/definitions/Language'
          Creator:
            $ref: '#/definitions/User'
          Date:
            type: string
            format: date-time
          IsArchived:
            type: boolean
            description: To know if the template is archived or not
          ArchivedDate:
            type: string
            format: date-time
            description: This is the date time when the template was archived
          CompanyId:
            type: string
            description: This is the id of the company owner of the template
            example: 91cb89f2-79a0-415c-9f47-77f22193b420
          Questions:
            type: array
            items:
              $ref: '#/definitions/FormQuestion'
          SignatureRules:
            type: array
            items:
              $ref: '#/definitions/FormSignatureRule'
  FormQuestion:
    description: To represent template for question in a form template
    type: object
    allOf:
      - $ref: '#/definitions/FormItemBase'
      - type: object
      - title: FormQuestion
      - properties:
          FormTemplateId:
            type: string
            description: this is the id of the FormTemplate owner of the question
            example: f230aeb4-7d72-435b-8e12-b9240156e098
          IsArchived:
            type: boolean
            description: To know if the question has been archived or not
          ArchivedDate:
            type: string
            format: date-time
            description: >-
              If the question is archived, this is the date when the archive has
              been done
  FormSignatureRule:
    type: object
    allOf:
      - $ref: '#/definitions/RestEntity'
      - type: object
      - title: FormSignatureRule
      - properties:
          Title:
            type: string
            description: this is the title to display for the wanted signature
            example: User who fill the form
          FormTemplateId:
            type: number
            description: This is the id of the parent template
          IsArchived:
            type: boolean
            description: To know if the question has been archived or not
          ArchivedDate:
            type: string
            format: date-time
            description: >-
              If the question is archived, this is the date when the archive has
              been done
  ReportRestIdentification:
    type: object
    description: Information returned by the server about the requested report
    properties:
      Date:
        type: string
        format: date-time
      GuidId:
        type: string
        description: The Id of the request report
        pattern: '^{[A-Z0-9]{8}-([A-Z0-9]{4}-){3}[A-Z0-9]{12}}$'
        example: f230aeb4-7d72-435b-8e12-b9240156e098
      NumberRecipients:
        type: integer
        description: The amount of recipients to whom the report will be sent
      ReportTitle:
        type: string
        description: The title of the report
      PreviewUri:
        type: string
        description: The URI where it is possible to preview the report
      Status:
        type: string
        description: The status of the requested report
  FormReportParams:
    type: object
    required:
      - FormId
    properties:
      FormId:
        type: string
        format: guid
        description: The Guid of the form that needs to be generated
        pattern: '^{[A-Z0-9]{8}-([A-Z0-9]{4}-){3}[A-Z0-9]{12}}$'
        example: f230aeb4-7d72-435b-8e12-b9240156e098
      ReportRequestId:
        type: string
        format: guid
        description: The Guid of the report request
        pattern: '^{[A-Z0-9]{8}-([A-Z0-9]{4}-){3}[A-Z0-9]{12}}$'
        example: de9590b5-14f2-4a07-8877-aad9e4b338e6
      LanguageCode:
        type: string
        description: The language in which the report will be generated
        example: EN
      Date:
        type: string
        format: date-time
        description: The report generation date
      PreviewUri:
        type: string
        description: >-
          This is the url to use to get the preview of the generated report when
          ready
      ReportTitle:
        type: string
      SendByMail:
        type: boolean
        description: Should this report be sent by mail ?
      RecipientIds:
        type: array
        items:
          type: string
        description: The list of user's guids that want the email sent to them
      MailSubject:
        type: string
        description: The mail subject that will be sent
      MailBody:
        type: string
        description: The text to insert in the body of the mail that will be sent
      Status:
        type: string
        enum:
          - New
          - InProgress
          - Generated
          - Error
          - Deleted

